"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var api_extractor_model_1 = require("@microsoft/api-extractor-model");
var yargs_1 = __importDefault(require("yargs"));
var tsdoc_1 = require("@microsoft/tsdoc");
var args = yargs_1.default.argv;
var apiModel = new api_extractor_model_1.ApiModel();
var apiPackage = apiModel.loadPackage(args._[0]);
for (var _i = 0, _a = apiPackage.members; _i < _a.length; _i++) {
    var entrypoint = _a[_i];
    for (var _b = 0, _c = entrypoint.members; _b < _c.length; _b++) {
        var exported = _c[_b];
        generateMd(exported);
    }
}
var MyEmitter = /** @class */ (function (_super) {
    __extends(MyEmitter, _super);
    function MyEmitter() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return MyEmitter;
}(tsdoc_1.TSDocEmitter));
function stringifyComment(com) {
    var sb = new tsdoc_1.StringBuilder();
    var tsde = new tsdoc_1.TSDocEmitter();
    tsde.renderComment(sb, com);
    return sb.toString();
}
function generateMd(item) {
    console.log('#', item.kind, item.getScopedNameWithinPackage());
    if (item.kind === "Class" /* Class */) {
        var cls = item;
        if (cls.tsdocComment) {
            cls.tsdocComment.deprecatedBlock;
            console.log(stringifyComment(cls.tsdocComment));
        }
    }
}
