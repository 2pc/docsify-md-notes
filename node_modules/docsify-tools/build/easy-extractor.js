"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const ae = __importStar(require("@microsoft/api-extractor"));
const os = __importStar(require("os"));
const path = __importStar(require("path"));
const mkdirp = __importStar(require("mkdirp"));
const yargs = __importStar(require("yargs"));
let tmpDir = path.resolve(os.tmpdir(), 'api-extractor-' + Math.random().toString());
mkdirp.sync(tmpDir);
let args = yargs
    .wrap(yargs.terminalWidth() - 1)
    .usage('$0 [-p pkgDir] -o docsDir')
    .options({
    package: {
        alias: 'p',
        type: 'string',
        describe: 'Path to the package directory (defaults to the current directory)',
        default: process.cwd()
    },
    output: {
        alias: 'o',
        type: 'string',
        describe: 'Where to output the documentation relative to the package directory',
        demandOption: true
    },
    help: {
        alias: 'h',
        type: 'boolean',
        describe: 'Show this help screen'
    }
}).argv;
let apiEx = new ae.Extractor({
    apiJsonFile: {
        enabled: true,
        outputFolder: tmpDir
    },
    apiReviewFile: {
        enabled: false
    },
    compiler: {
        configType: 'tsconfig',
        rootFolder: '.'
    },
    tsdocMetadata: {
        enabled: false
    },
    project: {
        entryPointSourceFile: 'build/index.d.ts'
    },
    "validationRules": {
        "missingReleaseTags": ae.ExtractorValidationRulePolicy.allow
    },
}, {
    localBuild: true
});
apiEx.processProject();
// todo: api-documenter
